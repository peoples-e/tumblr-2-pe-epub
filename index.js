// Generated by CoffeeScript 1.7.1
(function() {
  var Tumblr2Peepub, tumblr;

  tumblr = require('tumblr');

  Tumblr2Peepub = function(tumblrConfig) {
    var allPosts, bookDoc, fetchPosts, that, totalPosts;
    that = this;
    this.tumblrConfig = tumblrConfig;
    allPosts = [];
    totalPosts = false;
    bookDoc = {};
    fetchPosts = function(cb, offset) {
      return setTimeout(function() {
        if (!totalPosts || totalPosts > allPosts.length) {
          return that.blog.posts({
            offset: offset || 0
          }, function(err, res) {
            if (err) {
              return cb(err);
            }
            bookDoc = {
              title: res.blog.title,
              url: 'http://' + that.blogUrl,
              subtitle: res.blog.description,
              description: res.blog.description
            };
            totalPosts = res.total_posts;
            allPosts = allPosts.concat(res.posts);
            return fetchPosts(cb, allPosts.length);
          });
        } else {
          return cb(null, allPosts);
        }
      }, 500);
    };
    this.fetch = function(tumblrPrefix, cb) {
      this.blogUrl = tumblrPrefix + '.tumblr.com';
      this.blog = new tumblr.Blog(this.blogUrl, this.tumblrConfig);
      allPosts = [];
      totalPosts = false;
      bookDoc = {};
      return fetchPosts(function(err, posts) {
        var photos;
        if (err) {
          return cb(err);
        }
        photos = posts.filter(function(p) {
          return p.photos;
        }).map(function(p) {
          return p.photos[0].original_size.url;
        });
        bookDoc.cover = photos[photos.length - 1];
        bookDoc.pages = posts.map(function(p) {
          var body;
          if (p.photos) {
            body = (p.photos.map(function(photo) {
              return "<p><img src=\"" + photo.original_size.url + "\" /></p>";
            }).join('')) + p.caption;
          } else {
            body = p.caption;
          }
          return {
            title: p.caption ? p.caption.replace(/(<([^>]+)>)/ig, "") : "",
            body: body
          };
        }).filter(function(p) {
          return p.body != null;
        });
        return cb(null, bookDoc);
      });
    };
    return this;
  };

  module.exports = Tumblr2Peepub;

}).call(this);
