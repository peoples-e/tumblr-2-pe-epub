// Generated by CoffeeScript 1.7.1
(function() {
  var Tumblr2Peepub, cheerio, tumblr;

  tumblr = require('tumblr');

  cheerio = require('cheerio');

  Tumblr2Peepub = function(tumblrConfig) {
    var allPosts, bookDoc, fetchPosts, formatPosts, that, totalPosts;
    that = this;
    this.tumblrConfig = tumblrConfig;
    allPosts = [];
    totalPosts = false;
    bookDoc = {};
    fetchPosts = function(cb, offset) {
      return setTimeout(function() {
        if (totalPosts !== false || totalPosts > allPosts.length) {
          return that.blog.posts({
            offset: offset || 0
          }, function(err, res) {
            if (err) {
              return cb(err);
            }
            bookDoc = {
              title: res.blog.title || that.blogUrl,
              url: 'http://' + that.blogUrl,
              subtitle: res.blog.description,
              description: res.blog.description
            };
            totalPosts = res.total_posts;
            allPosts = allPosts.concat(res.posts);
            return fetchPosts(cb, allPosts.length);
          });
        } else {
          return cb(null, allPosts);
        }
      }, 500);
    };
    formatPosts = function(p) {
      var $, body, embed_code, exp, pbody, pcap, pdesc, pphotos, pquotesrc, psource, ptext, ptitle, pvideo, regex, title, video_domain, video_url;
      if (p.title) {
        ptitle = "<h1>" + p.title + "</h1>";
      } else {
        ptitle = "";
      }
      if (p.source_url) {
        psource = "<p>Source: <a href=\"" + p.source_url + "\">" + p.source_title + "</a></p>";
      } else {
        psource = "";
      }
      if (p.body) {
        pbody = p.body;
      } else {
        pbody = "";
      }
      if (p.text) {
        ptext = "<h1><blockquote>“" + p.text + "”</blockquote></h1>";
      } else {
        ptext = "";
      }
      if (p.source) {
        pquotesrc = "<p>— " + p.source + "</p>";
      } else {
        pquotesrc = "";
      }
      if (p.url) {
        if (p.title) {
          ptitle = "<h1><a href=\"" + p.url + "\">" + p.title + "</a></h1>";
        } else {
          ptitle = "<h1><a href=\"" + p.url + "\">" + p.url + "</a></h1>";
        }
      }
      if (p.description) {
        pdesc = p.description;
      } else {
        pdesc = "";
      }
      if (p.player) {
        if (p.player[0]["embed_code"]) {
          embed_code = p.player[0]["embed_code"];
          $ = cheerio.load(embed_code);
          video_url = $('iframe').attr('src');
          if (video_url) {
            if (video_url.indexOf('//') === 0) {
              video_url = video_url.replace('//', 'http://');
            }
            video_domain = video_url.replace('http://', '').replace('https://', '').split(/[/?#]/)[0];
            if (video_domain === "") {
              video_domain = video_url;
            }
            pvideo = "<h1><p>Video: <a href=\"" + video_url + "\">" + video_domain + "</a></p></h1>";
          }
        } else {
          pvideo = "";
        }
      } else {
        pvideo = "";
      }
      if (p.photos) {
        pphotos = p.photos.map(function(photo) {
          return "<p><img src=\"" + photo.original_size.url + "\" /></p>";
        }).join('');
      } else {
        pphotos = "";
      }
      if (p.caption) {
        pcap = p.caption;
      } else {
        pcap = "";
      }
      title = p.date.replace(" GMT", "");
      body = ptitle + ptext + pphotos + pvideo + pcap + pbody + pquotesrc + pdesc + psource;
      exp = /<iframe.+<\/iframe>/g;
      regex = new RegExp(exp);
      body = body.replace(regex, '');
      return {
        title: title,
        body: body,
        toc: true
      };
    };
    this.fetch = function(tumblrPrefix, cb) {
      this.blogUrl = tumblrPrefix + '.tumblr.com';
      this.blog = new tumblr.Blog(this.blogUrl, this.tumblrConfig);
      allPosts = [];
      totalPosts = false;
      bookDoc = {};
      return fetchPosts(function(err, posts) {
        var photos;
        if (err) {
          return cb(err);
        }
        photos = posts.filter(function(p) {
          return p.photos;
        }).map(function(p) {
          return p.photos[0].original_size.url;
        });
        bookDoc.cover = photos[photos.length - 1];
        bookDoc.pages = posts.map(formatPosts).filter(function(p) {
          return p.body != null;
        });
        return cb(null, bookDoc);
      });
    };
    return this;
  };

  module.exports = Tumblr2Peepub;

}).call(this);
